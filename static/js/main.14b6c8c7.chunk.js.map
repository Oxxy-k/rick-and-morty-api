{"version":3,"sources":["contex/api.js","locales/index.js","locales/en.js","locales/ru.js","contex/locale.js","components/shared/IconButton/index.jsx","constants/renderNavBarItems.js","components/shared/Text/index.jsx","components/Logo/index.jsx","components/Header/NavBar.jsx","components/Header/MobileNavBar.jsx","components/Header/LocaleDropdown.jsx","theme.js","helpers/useCurrentBreakpoint.js","components/Header/index.jsx","constants/searchingParams.js","helpers/toUpperCaseFirst.js","components/Pages/Locations/LocationItem.jsx","components/shared/Button/index.jsx","components/Spinner/index.jsx","constants/queryStringsForApi.js","components/ErrorBounadry/index.jsx","components/Pages/Locations/ModalLocationInfo.jsx","components/shared/Drawer/index.jsx","components/Pages/Locations/index.jsx","components/Pages/Characters/CharacterItem.jsx","components/Pages/Characters/ModalCharacterInfo.jsx","components/Pages/Characters/index.jsx","components/Pages/Episodes/ModalEpisodeInfo.jsx","components/Pages/Episodes/EpisodesItem.jsx","components/Pages/Episodes/index.jsx","components/Pages/Home/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["ApiContext","React","createContext","ApiProvider","children","getResource","url","a","fetch","data","ok","Error","status","json","jsonData","getAllCharacter","page","getCharacterById","id","getCharacterByParams","params","key","inititalSearchParams","searchParams","URLSearchParams","set","toString","getAllLocations","getLocationById","getLocationByParams","getAllEpisodes","getEpisodeById","getEpisodeByParams","season","episode","name","queryEpisode","queryName","Provider","value","locales","en","ru","SUPPORTED_LOCALES","defaultLanguage","supportedLanguages","Object","keys","localStorageItemName","LngContext","LngProvider","useState","locale","changeLocale","messages","setMessages","useEffect","lng","prevLng","localStorage","getItem","includes","navigatorLng","navigator","language","slice","getDefaultLanguage","setItem","IconButton","icon","onClick","size","variant","color","props","borderRadius","fontSize","p","minW","minH","h","w","backgroundColor","_focus","outline","_hover","cursor","defaultsProps","PropTypes","oneOf","renderNavBarItems","title","Text","messageId","lineHeight","messageValues","child","values","defaultProps","withRouter","to","pb","src","height","onOpen","justifyContent","alignItems","map","px","className","faSearch","autoSelect","as","ChakraIconButton","faBars","ml","LocaleDropdown","intl","useIntl","useContext","onChange","i","target","border","item","style","formatMessage","breakpoints","sm","md","lg","xl","theme","extendTheme","config","initialColorMode","useSystemColorMode","getCurrentBreakpoint","queries","newTheme","breakpoint","window","matchMedia","isTablet","matches","isDesktop","useCurrentBreakpoint","currentBreakpoint","setCurrentBreakpoint","onResize","addEventListener","removeEventListener","Header","position","top","zIndex","personSearchingParams","content","option","type","episodeSearchingParams","max","locationSearchingParams","toUpperCaseFirst","str","toUpperCase","EpisodesItem","dimension","wordwrap","Button","isLoading","textColor","bgColor","boxShadow","transition","Spinner","queryCharacters","ErrorBoundary","FlexTextItem","ModalLocationInfo","onClose","isOpen","locationId","setIsLoading","locationInfo","setLocationInfo","residents","setResidents","isError","setIsError","residentsId","replace","length","Array","isArray","scrollBehavior","mt","templateColumns","gap","image","maxW","Drawer","onUpdateListData","placement","initialParamsForSearching","LocationPage","paramsForSearching","setParamsForSearching","modalVisibility","toggleModalVisibility","currentLocationId","setCurrentEpisodeId","isNextPageExist","setIsNextPageExist","isFirstLoading","setIsFirstLoading","locations","setLocations","setPage","updateParamsForSearching","onUpdateLocationCharacter","info","next","results","e","focusBorderColor","placeholder","display","LocationItem","colors","alive","dead","unknown","generateColorStatus","toLowerCase","CharacterItem","species","gender","location","pl","textAlign","faCircle","ModalCharacterInfo","characterId","characterInfo","setCharacterInfo","firstCharacterEpisode","setFirstCharacterEpisode","origin","firstCharactersEpisodeId","isCentered","CharactersPage","characters","setCharacters","currentCharacterId","setCurrentCharacterId","onUpdateListCharacter","ModalEpisodeInfo","episodeId","episodeInfo","setEpisodeInfo","episodeCharacters","setEpisodeCharacters","air_date","episodeCharactersId","date","EpisodesPage","currentEpisodeId","episodes","setEpisodes","onUpdateListEpisode","count","min","HomePage","countOfAllCharacters","setCountOfAllCharacters","character","setCharacter","randomCharactersIndex","Math","floor","random","timer","setInterval","randomCharacterId","clearInterval","m","d","alignContent","App","useDisclosure","exact","path","render","Home","Episodes","Characters","Locations","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14b6c8c7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ApiContext = React.createContext();\r\n\r\nexport function ApiProvider({ children }) {\r\n  const getResource = async (url) => {\r\n    const data = await fetch(`https://rickandmortyapi.com/api/${url}`);\r\n    if (!data.ok) {\r\n      throw new Error(`Could not fetch ${url}, recieved ${data.status}`);\r\n    }\r\n    const jsonData = await data.json();\r\n    return jsonData;\r\n  };\r\n\r\n  const getAllCharacter = async (page) =>\r\n    await getResource(`character/?page=${page}`);\r\n\r\n  const getCharacterById = async (id) => await getResource(`character/${id}`);\r\n\r\n  const getCharacterByParams = async (params, page) => {\r\n    const inititalUrlRequest = \"character/?\";\r\n    const inititalSearchParams = `page=${page}`;\r\n    const searchParams = new URLSearchParams(inititalSearchParams);\r\n    for (let key in params) {\r\n      if (params[key] && params[key] !== \"All\") {\r\n        searchParams.set(key, params[key]);\r\n      }\r\n    }\r\n\r\n    return await getResource(inititalUrlRequest + searchParams.toString());\r\n  };\r\n\r\n  const getAllLocations = async (page) =>\r\n    await getResource(`location/?page=${page}`);\r\n\r\n  const getLocationById = async (id) => await getResource(`location/${id}`);\r\n\r\n  const getLocationByParams = async (params, page) => {\r\n    const inititalUrlRequest = \"location/?\";\r\n    const inititalSearchParams = `page=${page}`;\r\n    const searchParams = new URLSearchParams(inititalSearchParams);\r\n    for (let key in params) {\r\n      if (params[key] && params[key] !== \"All\") {\r\n        searchParams.set(key, params[key]);\r\n      }\r\n    }\r\n\r\n    return await getResource(inititalUrlRequest + searchParams.toString());\r\n  };\r\n\r\n  const getAllEpisodes = async (page) =>\r\n    await getResource(`episode?page=${page}`);\r\n\r\n  const getEpisodeById = async (id) => await getResource(`episode/${id}`);\r\n\r\n  const getEpisodeByParams = async (params, page) => {\r\n    const { season, episode, name } = params;\r\n    const queryEpisode =\r\n      season && episode\r\n        ? `&episode=S0${season}E${episode < 10 ? `0${episode}` : episode}`\r\n        : \"\";\r\n    const queryName = name ? `&name=${name}` : \"\";\r\n    return await getResource(\r\n      `episode/?page=${page}${queryEpisode}${queryName}`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ApiContext.Provider\r\n      value={{\r\n        getAllCharacter,\r\n        getCharacterById,\r\n        getCharacterByParams,\r\n        getAllLocations,\r\n        getLocationById,\r\n        getLocationByParams,\r\n        getAllEpisodes,\r\n        getEpisodeById,\r\n        getEpisodeByParams,\r\n      }}\r\n    >\r\n      {children}\r\n    </ApiContext.Provider>\r\n  );\r\n}\r\n","import en from './en'\r\nimport ru from './ru'\r\n\r\nconst locales = {\r\n  en,\r\n  ru,\r\n}\r\n\r\nexport default locales\r\n","const messages = {\r\n  \"header.episodes\": \"Episodes\",\r\n  \"header.characters\": \"Characters\",\r\n  \"header.locations\": \"Locations\",\r\n  \"header.searchByParameters\": \"Searching by parameters\",\r\n\r\n  \"placeholder.search\": \"Search...\",\r\n\r\n  \"languages.en\": \"English\",\r\n  \"languages.ru\": \"Russian\",\r\n\r\n  \"episode.name\": \"Episode name:\",\r\n  \"episode.episode\": \"Episode:\",\r\n  \"episode.date\": \"Date:\",\r\n  \"episode.characters\": \"Characters\",\r\n  \"episode.season\": \"Season:\",\r\n\r\n  \"character.lastKnowLocation\": \"Last known location:\",\r\n  \"character.gender\": \"Gender:\",\r\n  \"character.status\": \"Status:\",\r\n  \"character.species\": \"Species:\",\r\n  \"character.type\": \"Type:\",\r\n  \"character.originLocation\": \"Origin location:\",\r\n  \"character.firstSeenIn\": \"First seen in:\",\r\n\r\n  \"location.name\": \"Name:\",\r\n  \"location.type\": \"Type:\",\r\n  \"location.dimension\": \"Dimension:\",\r\n  \"location.residents\": \"Residents\",\r\n\r\n  \"button.more\": \"More\",\r\n  \"button.close\": \"Close\",\r\n  \"button.cancel\": \"Cancel\",\r\n  \"button.search\": \"Search\",\r\n  \"error.message\": \"Um... Damn... Rick, it seems something is wrong...\",\r\n\r\n  \"rickAndMorty.main\":\r\n    \"Rick and Morty is an American adult animated science fiction sitcom created by Justin Roiland and Dan Harmon for Cartoon Network`s nighttime programming block, Adult Swim. The series follows the misadventures of cynical mad scientist Rick Sanchez and his good-hearted, but fretful grandson Morty Smith, who split their time between domestic life and interdimensional adventures. Roiland voices the eponymous characters, with Chris Parnell, Spencer Grammer and Sarah Chalke voicing the rest of Rick and Morty`s family. The series originated from an animated short parody film of Back to the Future, created by Roiland for Channel 101, a short film festival co-founded by Harmon. The series has been acclaimed by critics for its originality, creativity and humor. The current fifth season premiered on June 20, 2021, and consists of ten episodes. A sixth season was confirmed as part of a long-term deal in May 2018 that ordered 70 new episodes over an unspecified number of seasons.\",\r\n};\r\n\r\nexport default messages;\r\n","const messages = {\r\n  \"header.episodes\": \"Эпизоды\",\r\n  \"header.characters\": \"Персонажи\",\r\n  \"header.locations\": \"Локации\",\r\n  \"header.searchByParameters\": \"Поиск по параметрам\",\r\n\r\n  \"placeholder.search\": \"Поиск...\",\r\n\r\n  \"languages.en\": \"Английский\",\r\n  \"languages.ru\": \"Русский\",\r\n\r\n  \"episode.name\": \"Название серии:\",\r\n  \"episode.episode\": \"Серия:\",\r\n  \"episode.date\": \"Дата:\",\r\n  \"episode.characters\": \"Персонажи\",\r\n  \"episode.season\": \"Сезон:\",\r\n\r\n  \"character.lastKnowLocation\": \"Последняя локация:\",\r\n  \"character.gender\": \"Пол:\",\r\n  \"character.status\": \"Статус:\",\r\n  \"character.species\": \"Вид:\",\r\n  \"character.type\": \"Тип:\",\r\n  \"character.originLocation\": \"Место рождения:\",\r\n  \"character.firstSeenIn\": \"Впервые появился:\",\r\n\r\n  \"location.name\": \"Название локации:\",\r\n  \"location.type\": \"Тип:\",\r\n  \"location.dimension\": \"Измерение:\",\r\n  \"location.residents\": \"Жители\",\r\n\r\n  \"button.more\": \"Ещё\",\r\n  \"button.close\": \"Закрыть\",\r\n  \"button.cancel\": \"Отмена\",\r\n  \"button.search\": \"Поиск\",\r\n\r\n  \"error.message\": \"Эмм... Блин... Рик, кажется что-то не так...\",\r\n\r\n  \"rickAndMorty.main\":\r\n    \"«Рик и Морти» — американский комедийный научно-фантастический анимационный сериал, созданный Джастином Ройландом и Дэном Хармоном и выпускаемый в рамках блока Adult Swim на телеканале Cartoon Network. Премьера сериала состоялась в декабре 2013 года; второй сезон вышел в 2015. 1 октября 2017 года завершился третий сезон, и в мае 2018 года было объявлено о выпуске ещё 70 эпизодов при неопределённом количестве сезонов. В мае 2019 года была объявлена дата выхода четвёртого сезона — ноябрь 2019. Первые пять эпизодов вышли в свет в ноябре-декабре, остальные — после перерыва, 3—31 мая 2020 года. Также в мае было объявлено о продлении сериала на пятый сезон (без указания конкретных дат). 30 марта 2021 года вышел официальный трейлер пятого сезона и была объявлена дата выхода сезона — 20 июня 2021 года. Сериал посвящён злоключениям циничного безумного учёного Рика Санчеса и его наивного, капризного и неуверенного в себе внука Морти; создатель сериала Ройланд озвучивает обоих персонажей. Сериал, выросший из хулиганской анимационной пародии на франшизу «Назад в будущее», получил чрезвычайно высокие отзывы критики, особо отмечавшей его оригинальность, креативность и чувство юмора.\",\r\n};\r\n\r\nexport default messages;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { IntlProvider } from \"react-intl\";\r\nimport locales from \"../locales\";\r\n\r\nexport const SUPPORTED_LOCALES = {\r\n  en: \"en\",\r\n  ru: \"ru\",\r\n};\r\n\r\nconst defaultLanguage = SUPPORTED_LOCALES.ru;\r\nconst supportedLanguages = Object.keys(SUPPORTED_LOCALES);\r\nconst localStorageItemName = \"selected-language\";\r\n\r\nfunction getDefaultLanguage() {\r\n  const prevLng = localStorage.getItem(localStorageItemName);\r\n\r\n  if (supportedLanguages.includes(prevLng)) {\r\n    return SUPPORTED_LOCALES[prevLng];\r\n  }\r\n\r\n  const navigatorLng = navigator.language.slice(0, 2);\r\n\r\n  if (supportedLanguages.includes(navigatorLng)) {\r\n    return SUPPORTED_LOCALES[navigatorLng];\r\n  }\r\n\r\n  return defaultLanguage;\r\n}\r\n\r\nexport const LngContext = React.createContext();\r\n\r\nexport function LngProvider({ children }) {\r\n  const [locale, changeLocale] = useState(defaultLanguage);\r\n  const [messages, setMessages] = useState(locales[defaultLanguage]);\r\n\r\n\r\n  // Loads previously selected language from localStorage or navigator\r\n  useEffect(() => {\r\n    const lng = getDefaultLanguage();\r\n\r\n    if (supportedLanguages.includes(lng)) {\r\n      changeLocale(lng);\r\n      setMessages(locales[lng]);\r\n    }\r\n  }, []);\r\n\r\n  const handleLocaleChange = (locale) => {\r\n    if (!supportedLanguages.includes(locale)) {\r\n      return;\r\n    }\r\n\r\n    changeLocale(locale);\r\n    setMessages(locales[locale]);\r\n\r\n    localStorage.setItem(localStorageItemName, locale);\r\n  };\r\n\r\n  return (\r\n    <LngContext.Provider\r\n      value={{ locale, changeLocale: handleLocaleChange, messages }}\r\n    >\r\n      <IntlProvider locale={locale} messages={messages}>\r\n        {children}\r\n      </IntlProvider>\r\n    </LngContext.Provider>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@chakra-ui/react\";\r\n\r\nconst IconButton = ({ icon, onClick, size, variant, color, ...props }) => {\r\n  return (\r\n    <Button\r\n      borderRadius=\"0px\"\r\n      fontSize=\"15px\"\r\n      p=\"0\"\r\n      minW=\"5px\"\r\n      minH=\"5px\"\r\n      h=\"30px\"\r\n      w=\"30px\"\r\n      backgroundColor=\"transparent\"\r\n      variant={variant}\r\n      size={size}\r\n      color={color}\r\n      _focus={{ outline: \"none\" }}\r\n      _hover={{ color: \"white\", cursor: \"pointer\" }}\r\n      onClick={onClick}\r\n      {...props}\r\n    >\r\n      {icon}\r\n    </Button>\r\n  );\r\n};\r\n\r\nIconButton.propTypes = {\r\n  color: PropTypes.string,\r\n  variant: PropTypes.string,\r\n  icon: PropTypes.node,\r\n  onClick: PropTypes.func.isRequired,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\", \"xs\"]),\r\n};\r\n\r\nIconButton.defaultsProps = {\r\n  color: \"gray\",\r\n  variant: \"link\",\r\n  icon: <></>,\r\n  onClick: () => ({}),\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\", \"xs\"]),\r\n};\r\n\r\nexport default IconButton;\r\n","export const renderNavBarItems = [\r\n  { title: \"episodes\", key: 1 },\r\n  { title: \"characters\", key: 2 },\r\n  { title: \"locations\", key: 3 },\r\n];\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Text as ChakraText } from \"@chakra-ui/react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport function Text({\r\n  messageId,\r\n  fontSize,\r\n  lineHeight,\r\n  messageValues,\r\n  color,\r\n  ...props\r\n}) {\r\n  const child = messageId ? (\r\n    <FormattedMessage id={messageId} values={messageValues} />\r\n  ) : (\r\n    props.children\r\n  );\r\n\r\n  return (\r\n    <ChakraText\r\n      color={color}\r\n      fontSize={fontSize}\r\n      lineHeight={lineHeight}\r\n      {...props}\r\n    >\r\n      {child}\r\n    </ChakraText>\r\n  );\r\n}\r\n\r\nText.propTypes = {\r\n  fontSize: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  lineHeight: PropTypes.string,\r\n  color: PropTypes.string,\r\n};\r\n\r\nText.defaultProps = {\r\n  fontSize: [\"14px\", \"18px\"],\r\n  lineHeight: \"150%\",\r\n  color: \"gray\",\r\n};\r\n\r\nexport default Text;\r\n","import React from \"react\";\r\nimport { Image, Box } from \"@chakra-ui/react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <Link to=\"/\">\r\n      <Box cursor=\"pointer\">\r\n        <Image\r\n          pb=\"10px\"\r\n          src=\"https://occ-0-1068-1723.1.nflxso.net/dnm/api/v6/TsSRXvDuraoJ7apdkH6tsHhf-ZQ/AAAABbtnw6C35mhluezr-K_FiP65TW93xpH0M3S6lKPv50_7eshzc1vosWxE3CxcnJ5-eVYmpcaQyra9yFLzQtsNx4odwYO-GtDDmDU0.png?r=47e\"\r\n          height=\"50px\"\r\n        />\r\n      </Box>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default withRouter(Logo);\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport IconButton from \"../shared/IconButton\";\r\nimport { renderNavBarItems } from \"../../constants/renderNavBarItems\";\r\nimport Text from \"../shared/Text\";\r\nimport Logo from \"../Logo\";\r\n\r\nconst NavBar = ({ onOpen }) => {\r\n  return (\r\n    <>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" h=\"40px\">\r\n        <Logo />\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          {renderNavBarItems.map(({ title, key }) => (\r\n            <Link to={`/${title}`} key={key}>\r\n              <Text\r\n                messageId={`header.${title}`}\r\n                px=\"15px\"\r\n                className=\"navbar-item\"\r\n              />\r\n            </Link>\r\n          ))}\r\n          <IconButton\r\n            icon={<FontAwesomeIcon icon={faSearch} color=\"gray\" />}\r\n            size=\"sm\"\r\n            onClick={onOpen}\r\n            className=\"navbar-item\"\r\n          />\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(NavBar);\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch, faBars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n  Flex,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  IconButton as ChakraIconButton,\r\n} from \"@chakra-ui/react\";\r\nimport IconButton from \"../shared/IconButton\";\r\nimport { renderNavBarItems } from \"../../constants/renderNavBarItems\";\r\nimport Text from \"../shared/Text\";\r\nimport Logo from \"../Logo\";\r\n\r\nconst MobileNavBar = ({ onOpen }) => {\r\n  return (\r\n    <>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Menu autoSelect={false}>\r\n          <MenuButton\r\n            as={ChakraIconButton}\r\n            icon={<FontAwesomeIcon icon={faBars} color=\"gray\" />}\r\n            _focus={{ outline: \"none\" }}\r\n            variant=\"ghost\"\r\n          />\r\n          <MenuList>\r\n            {renderNavBarItems.map(({ title, key }) => (\r\n              <MenuItem key={key}>\r\n                <Link to={`/${title}`}>\r\n                  <Text messageId={`header.${title}`} px=\"15px\" />\r\n                </Link>\r\n              </MenuItem>\r\n            ))}\r\n          </MenuList>\r\n        </Menu>\r\n        <IconButton\r\n          icon={<FontAwesomeIcon icon={faSearch} color=\"gray\" />}\r\n          size=\"sm\"\r\n          onClick={onOpen}\r\n          ml=\"5px\"\r\n        />\r\n      </Flex>\r\n      <Logo />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(MobileNavBar);\r\n","import React, { useContext } from \"react\";\r\nimport { Select } from \"@chakra-ui/react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { LngContext } from \"../../contex/locale\";\r\n\r\nconst locales = [\"ru\", \"en\"];\r\n\r\nconst LocaleDropdown = () => {\r\n  const intl = useIntl();\r\n  const { locale, changeLocale } = useContext(LngContext);\r\n\r\n  const onChange = (key) => {\r\n    changeLocale(key);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      w=\"120px\"\r\n      value={locale}\r\n      onChange={(i) => onChange(i.target.value)}\r\n      border=\"none\"\r\n      _focus={{ outline: \"none\" }}\r\n      cursor=\"pointer\"\r\n      size=\"lg\"\r\n      color=\"gray\"\r\n      height=\"40px\"\r\n    >\r\n      {locales.map((item) => (\r\n        <option\r\n          key={item}\r\n          value={item}\r\n          style={{\r\n            backgroundColor: \"black\",\r\n          }}\r\n        >\r\n          {intl.formatMessage({ id: `languages.${item}` })}\r\n        </option>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nexport default LocaleDropdown;\r\n","import { extendTheme } from \"@chakra-ui/react\";\r\n\r\nconst breakpoints = [\"576px\", \"768px\", \"1024px\", \"1440px\"];\r\n\r\nbreakpoints.sm = breakpoints[0];\r\nbreakpoints.md = breakpoints[1];\r\nbreakpoints.lg = breakpoints[2];\r\nbreakpoints.xl = breakpoints[3];\r\n\r\nconst config = {\r\n  initialColorMode: \"dark\",\r\n  useSystemColorMode: false,\r\n};\r\n\r\nconst theme = extendTheme({ config, breakpoints });\r\n\r\nexport default theme;\r\n","import { useState, useEffect } from \"react\";\r\nimport newTheme from \"../theme\";\r\n\r\nconst getCurrentBreakpoint = () => {\r\n  const queries = newTheme.breakpoints.map((breakpoint) => {\r\n    return window.matchMedia(`(min-width: ${breakpoint})`);\r\n  });\r\n\r\n  const selectBreakpoint = {\r\n    isTablet: queries[1].matches,\r\n    isDesktop: queries[2].matches,\r\n  };\r\n\r\n  return selectBreakpoint;\r\n};\r\n\r\nconst useCurrentBreakpoint = () => {\r\n  const [currentBreakpoint, setCurrentBreakpoint] = useState({\r\n    isTablet: false,\r\n    isDesktop: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setCurrentBreakpoint(getCurrentBreakpoint());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const onResize = () => {\r\n      setCurrentBreakpoint(getCurrentBreakpoint());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", onResize);\r\n    return () => window.removeEventListener(\"resize\", onResize);\r\n  });\r\n\r\n  return currentBreakpoint;\r\n};\r\n\r\nexport default useCurrentBreakpoint;\r\n","import React from \"react\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\nimport NavBar from \"./NavBar\";\r\nimport MobileNavBar from \"./MobileNavBar\";\r\nimport LocaleDropdown from \"./LocaleDropdown\";\r\nimport useCurrentBreakpoint from \"../../helpers/useCurrentBreakpoint\";\r\n\r\nconst Header = ({ onOpen }) => {\r\n  const { isTablet } = useCurrentBreakpoint();\r\n\r\n  return (\r\n    <Flex\r\n      position=\"sticky\"\r\n      top=\"0\"\r\n      backgroundColor=\"black\"\r\n      height=\"40px\"\r\n      alignItems=\"center\"\r\n      zIndex=\"1\"\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" px=\"5%\" w=\"100%\">\r\n        {isTablet ? (\r\n          <NavBar onOpen={onOpen} />\r\n        ) : (\r\n          <MobileNavBar onOpen={onOpen} />\r\n        )}\r\n        <LocaleDropdown />\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const personSearchingParams = [\r\n  {\r\n    content: [\r\n      { option: \"All\", id: 1 },\r\n      { option: \"Alive\", id: 2 },\r\n      { option: \"Dead\", id: 3 },\r\n      { option: \"Unknown\", id: 4 },\r\n    ],\r\n    type: \"status\",\r\n    key: 1,\r\n  },\r\n  {\r\n    content: [\r\n      { option: \"All\", id: 1 },\r\n      { option: \"Human\", id: 2 },\r\n      { option: \"Alien\", id: 3 },\r\n      { option: \"Humanoid\", id: 4 },\r\n      { option: \"Unknown\", id: 5 },\r\n      { option: \"Animal\", id: 6 },\r\n      { option: \"Robot\", id: 7 },\r\n    ],\r\n    type: \"species\",\r\n    key: 2,\r\n  },\r\n  {\r\n    content: [\r\n      { option: \"All\", id: 1 },\r\n      { option: \"Parasite\", id: 2 },\r\n      { option: \"Vampire\", id: 3 },\r\n      { option: \"Centaur\", id: 4 },\r\n    ],\r\n    type: \"type\",\r\n    key: 3,\r\n  },\r\n  {\r\n    content: [\r\n      { option: \"All\", id: 1 },\r\n      { option: \"Female\", id: 2 },\r\n      { option: \"Male\", id: 3 },\r\n      { option: \"Genderless\", id: 4 },\r\n      { option: \"Unknown\", id: 5 },\r\n    ],\r\n    type: \"gender\",\r\n    key: 4,\r\n  },\r\n];\r\n\r\nexport const episodeSearchingParams = [\r\n  { type: \"season\", id: 1, max: 5 },\r\n  { type: \"episode\", id: 2, max: 25 },\r\n];\r\n\r\nexport const locationSearchingParams = [\r\n  { type: \"All\", id: 1 },\r\n  { type: \"Planet\", id: 2 },\r\n  { type: \"Cluster\", id: 3 },\r\n  { type: \"TV\", id: 4 },\r\n  { type: \"Space station\", id: 5 },\r\n  { type: \"Resort\", id: 6 },\r\n  { type: \"Microverse\", id: 7 },\r\n];\r\n","export const toUpperCaseFirst = (str) => {\r\n  if (!str) return str;\r\n\r\n  return str[0].toUpperCase() + str.slice(1);\r\n};\r\n","import React from \"react\";\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\nimport { toUpperCaseFirst } from \"../../../helpers/toUpperCaseFirst\";\r\nimport Text from \"../../shared/Text\";\r\n\r\nconst EpisodesItem = ({ name, type, dimension, onClick }) => {\r\n  return (\r\n    <Box\r\n      onClick={onClick}\r\n      w={[\"300px\", \"300px\", \"300px\", \"500px\"]}\r\n      className=\"content-item-wrapper\"\r\n    >\r\n      <Flex>\r\n        <Text messageId=\"location.name\" />\r\n        <Text ml=\"5px\" wordwrap=\"break-word\" color=\"white\">\r\n          {toUpperCaseFirst(name)}\r\n        </Text>\r\n      </Flex>\r\n      <Flex>\r\n        <Text messageId=\"location.type\" />\r\n        <Text ml=\"5px\" wordwrap=\"break-word\" color=\"white\">\r\n          {toUpperCaseFirst(type)}\r\n        </Text>\r\n      </Flex>\r\n      <Flex>\r\n        <Text messageId=\"location.dimension\" />\r\n        <Text ml=\"5px\" wordwrap=\"break-word\" color=\"white\">\r\n          {toUpperCaseFirst(dimension)}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default EpisodesItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button as ChakraButton } from \"@chakra-ui/react\";\r\nimport Text from \"../Text\";\r\n\r\nconst Button = ({\r\n  onClick,\r\n  messageId,\r\n  variant,\r\n  isLoading,\r\n  size,\r\n  textColor,\r\n  ...props\r\n}) => (\r\n  <ChakraButton\r\n    onClick={onClick}\r\n    variant={variant}\r\n    isLoading={isLoading}\r\n    size={size}\r\n    _hover={{\r\n      bgColor: \"none\",\r\n      boxShadow: \"0 0 10px rgb(0, 217, 255)\",\r\n      transition: \"all 0.4s\",\r\n    }}\r\n    _focus={{ outline: \"none\" }}\r\n    {...props}\r\n  >\r\n    <Text messageId={messageId} color={textColor} fontSize=\"14px\" />\r\n  </ChakraButton>\r\n);\r\n\r\nButton.propTypes = {\r\n  textColor: PropTypes.string,\r\n  onClick: PropTypes.func.isRequired,\r\n  variant: PropTypes.oneOf([\"link\", \"outline\", \"solid\", \"ghost\", \"unstyled\"]),\r\n  isLoading: PropTypes.bool,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\", \"xs\"]),\r\n};\r\n\r\nButton.defaultProps = {\r\n  textColor: \"white\",\r\n  variant: \"outline\",\r\n  isLoading: false,\r\n  size: \"sm\",\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { Image, Flex } from \"@chakra-ui/react\";\r\n\r\nimport \"./Spinner.css\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" h=\"90vh\">\r\n      <Image\r\n        className=\"spinner\"\r\n        src=\"https://mystickermania.com/cdn/stickers/rick-and-morty/sticker_2060-512x512.png\"\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","export const queryEpisodes = \"https://rickandmortyapi.com/api/episode/\";\r\n\r\nexport const queryCharacters = \"https://rickandmortyapi.com/api/character/\";\r\n\r\nexport const queryLocations = \"https://rickandmortyapi.com/api/location/\";\r\n","import React from \"react\";\r\nimport { Image, Flex, Box } from \"@chakra-ui/react\";\r\nimport { Text } from \"../shared/Text\";\r\n\r\nconst ErrorBoundary = () => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" h=\"90vh\">\r\n      <Box>\r\n        <Flex justifyContent=\"center\">\r\n          <Image\r\n            src=\"https://upload.wikimedia.org/wikipedia/ru/c/c3/Morty_Smith.png\"\r\n            h=\"300px\"\r\n          />\r\n        </Flex>\r\n        <Text messageId=\"error.message\" color=\"white\" fontSize=\"24px\" />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ApiContext } from \"../../../contex/api\";\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Image,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  Grid,\r\n  GridItem,\r\n} from \"@chakra-ui/react\";\r\nimport Spinner from \"../../Spinner\";\r\nimport Button from \"../../shared/Button\";\r\nimport Text from \"../../shared/Text\";\r\nimport { queryCharacters } from \"../../../constants/queryStringsForApi\";\r\nimport { toUpperCaseFirst } from \"../../../helpers/toUpperCaseFirst\";\r\nimport ErrorBoundary from \"../../ErrorBounadry\";\r\n\r\nconst FlexTextItem = ({ content, messageId }) => {\r\n  return (\r\n    <Flex>\r\n      <Text messageId={`location.${messageId}`} fontSize=\"18px\" minW=\"200px\" />\r\n      <Text color=\"white\" fontSize=\"18px\">\r\n        {toUpperCaseFirst(content)}\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst ModalLocationInfo = ({ onClose, isOpen, locationId }) => {\r\n  const { getCharacterById, getLocationById } = useContext(ApiContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [locationInfo, setLocationInfo] = useState({});\r\n  const [residents, setResidents] = useState([]);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const { name, type, dimension } = locationInfo;\r\n\r\n  const content = [\r\n    { content: type, messageId: \"type\", key: 0 },\r\n    { content: dimension, messageId: \"dimension\", key: 1 },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (!locationId) return;\r\n    (async () => {\r\n      if (isError) {\r\n        setIsError(false);\r\n      }\r\n      setIsLoading(true);\r\n      try {\r\n        const locationInfo = await getLocationById(locationId);\r\n        const residentsId = locationInfo.residents.map((item) =>\r\n          item.replace(queryCharacters, \"\")\r\n        );\r\n        if (residentsId.length) {\r\n          const residents = await getCharacterById(residentsId);\r\n          Array.isArray(residents)\r\n            ? setResidents(residents)\r\n            : setResidents([residents]);\r\n        } else {\r\n          setResidents([]);\r\n        }\r\n        setIsLoading(false);\r\n        setLocationInfo(locationInfo);\r\n      } catch {\r\n        setIsError(true);\r\n        setIsLoading(false);\r\n      }\r\n    })();\r\n  }, [locationId]);\r\n\r\n  return (\r\n    <Modal\r\n      size={\"xl\"}\r\n      onClose={onClose}\r\n      isOpen={isOpen}\r\n      scrollBehavior={\"outside\"}\r\n      position=\"fixed\"\r\n    >\r\n      <ModalOverlay />\r\n      <ModalContent backgroundColor=\"black\">\r\n        {isLoading ? (\r\n          <Spinner />\r\n        ) : isError ? (\r\n          <ErrorBoundary />\r\n        ) : (\r\n          <>\r\n            <ModalHeader>\r\n              <Text fontSize=\"30px\" color=\"white\">\r\n                {name}\r\n              </Text>\r\n            </ModalHeader>\r\n            <ModalBody>\r\n              <Box>\r\n                {content.map(\r\n                  ({ content, messageId, key }) =>\r\n                    content && (\r\n                      <FlexTextItem\r\n                        content={content}\r\n                        messageId={messageId}\r\n                        key={key}\r\n                      />\r\n                    )\r\n                )}\r\n              </Box>\r\n              <Text messageId=\"location.residents\" mt=\"5px\" fontSize=\"24px\" />\r\n              {residents.length && (\r\n                <Grid\r\n                  templateColumns={[\"repeat(3, 2fr)\", \"repeat(4, 2fr)\"]}\r\n                  gap={5}\r\n                  mt=\"5px\"\r\n                >\r\n                  {residents.map(({ name, image, id }) => (\r\n                    <GridItem key={id}>\r\n                      <Box>\r\n                        <Image src={image} maxW=\"70px\" />\r\n                        <Text color=\"white\" mt=\"5px\">\r\n                          {name}\r\n                        </Text>\r\n                      </Box>\r\n                    </GridItem>\r\n                  ))}\r\n                </Grid>\r\n              )}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button onClick={onClose} messageId=\"button.close\" />\r\n            </ModalFooter>\r\n          </>\r\n        )}\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalLocationInfo;\r\n","import React from \"react\";\r\nimport {\r\n  Drawer as ChakraDrawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n} from \"@chakra-ui/react\";\r\nimport Button from \"../Button\";\r\nimport Text from \"../Text\";\r\n\r\nexport default function Drawer({\r\n  isOpen,\r\n  onClose,\r\n  children,\r\n  onUpdateListData,\r\n}) {\r\n  return (\r\n    <>\r\n      <ChakraDrawer isOpen={isOpen} placement=\"left\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent backgroundColor=\"black\">\r\n          <DrawerHeader>\r\n            <Text fontSize=\"30px\" messageId=\"header.searchByParameters\" />\r\n          </DrawerHeader>\r\n\r\n          <DrawerBody color=\"white\">{children}</DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button onClick={onClose} messageId=\"button.cancel\" />\r\n            <Button\r\n              onClick={() => {\r\n                onUpdateListData();\r\n                onClose();\r\n              }}\r\n              backgroundColor=\"rgb(0, 217, 255)\"\r\n              textColor=\"black\"\r\n              variant=\"ghost\"\r\n              messageId=\"button.search\"\r\n              ml=\"10px\"\r\n            />\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </ChakraDrawer>\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Box, Grid, GridItem, Input, Flex, Select } from \"@chakra-ui/react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { ApiContext } from \"../../../contex/api\";\r\nimport { locationSearchingParams } from \"../../../constants/searchingParams\";\r\nimport LocationItem from \"./LocationItem\";\r\nimport Button from \"../../shared/Button\";\r\nimport Spinner from \"../../Spinner\";\r\nimport ModalLocationInfo from \"./ModalLocationInfo\";\r\nimport Drawer from \"../../shared/Drawer\";\r\nimport Text from \"../../shared/Text\";\r\nimport ErrorBoundary from \"../../ErrorBounadry\";\r\n\r\nconst countOfFirstPage = 1;\r\n\r\nconst initialParamsForSearching = {\r\n  name: \"\",\r\n  type: \"All\",\r\n};\r\n\r\nfunction LocationPage({ isOpen, onClose, onOpen }) {\r\n  const intl = useIntl();\r\n  const { getLocationByParams } = useContext(ApiContext);\r\n  const [paramsForSearching, setParamsForSearching] = useState(\r\n    initialParamsForSearching\r\n  );\r\n  const [modalVisibility, toggleModalVisibility] = useState(false);\r\n  const [currentLocationId, setCurrentEpisodeId] = useState();\r\n  const [isNextPageExist, setIsNextPageExist] = useState(true);\r\n  const [isFirstLoading, setIsFirstLoading] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [locations, setLocations] = useState([]);\r\n  const [page, setPage] = useState(countOfFirstPage);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const updateParamsForSearching = (params, type) => {\r\n    setParamsForSearching({ ...paramsForSearching, [type]: params });\r\n  };\r\n\r\n  const onUpdateLocationCharacter = async () => {\r\n    if (isError) {\r\n      setIsError(false);\r\n    }\r\n    setIsLoading(true);\r\n    setPage(countOfFirstPage);\r\n    try {\r\n      const data = await getLocationByParams(paramsForSearching, page);\r\n      setIsNextPageExist(!!data.info.next);\r\n      setLocations(data.results);\r\n      setIsLoading(false);\r\n    } catch {\r\n      setIsError(true);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!locations.length) {\r\n        setIsFirstLoading(true);\r\n      }\r\n      if (isError) {\r\n        setIsError(false);\r\n      }\r\n      setIsLoading(true);\r\n      try {\r\n        const data = await getLocationByParams(paramsForSearching, page);\r\n        setIsNextPageExist(!!data.info.next);\r\n        setLocations([...locations, ...data.results]);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setIsError(true);\r\n        setIsLoading(false);\r\n      }\r\n      if (locations.length) {\r\n        return;\r\n      }\r\n      setIsFirstLoading(false);\r\n    })();\r\n  }, [page]);\r\n\r\n  if (isError) {\r\n    return <ErrorBoundary />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        onOpen={onOpen}\r\n        onClose={onClose}\r\n        onUpdateListData={onUpdateLocationCharacter}\r\n      >\r\n        <Input\r\n          value={paramsForSearching.name}\r\n          onChange={(e) => updateParamsForSearching(e.target.value, \"name\")}\r\n          focusBorderColor=\"rgb(0, 217, 255)\"\r\n          variant=\"flushed\"\r\n          placeholder={intl.formatMessage({ id: \"placeholder.search\" })}\r\n        />\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"20px\">\r\n          <Text messageId=\"location.type\" />\r\n          <Select\r\n            value={paramsForSearching.type}\r\n            onChange={(e) => updateParamsForSearching(e.target.value, \"type\")}\r\n            maxW=\"200px\"\r\n            size=\"xs\"\r\n            focusBorderColor=\"rgb(0, 217, 255)\"\r\n            borderRadius=\"12px\"\r\n          >\r\n            {locationSearchingParams.map(({ type, id }) => (\r\n              <option\r\n                key={id}\r\n                style={{\r\n                  backgroundColor: \"black\",\r\n                }}\r\n              >\r\n                {type}\r\n              </option>\r\n            ))}\r\n          </Select>\r\n        </Flex>\r\n      </Drawer>\r\n      <Box p=\"20px\">\r\n        {isFirstLoading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <>\r\n            <Grid\r\n              templateColumns={[\"repeat(1, 2fr)\", \"repeat(2, 2fr)\"]}\r\n              gap={3}\r\n            >\r\n              {!!locations.length &&\r\n                locations.map(({ id, name, type, dimension }) => (\r\n                  <GridItem key={id} display=\"flex\" justifyContent=\"center\">\r\n                    <LocationItem\r\n                      onClick={() => {\r\n                        toggleModalVisibility(true);\r\n                        setCurrentEpisodeId(id);\r\n                      }}\r\n                      name={name}\r\n                      type={type}\r\n                      dimension={dimension}\r\n                    />\r\n                  </GridItem>\r\n                ))}\r\n            </Grid>\r\n            {isNextPageExist && (\r\n              <Box mt=\"20px\" display=\"flex\" justifyContent=\"center\">\r\n                <Button\r\n                  size=\"md\"\r\n                  isLoading={isLoading}\r\n                  onClick={() => setPage(page + 1)}\r\n                  messageId=\"button.more\"\r\n                />\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n      <ModalLocationInfo\r\n        locationId={currentLocationId}\r\n        onClose={() => toggleModalVisibility(false)}\r\n        isOpen={modalVisibility}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LocationPage;\r\n","import React from \"react\";\r\nimport { Box, Flex, Image } from \"@chakra-ui/react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { toUpperCaseFirst } from \"../../../helpers/toUpperCaseFirst\";\r\nimport Text from \"../../shared/Text\";\r\n\r\nconst colors = { alive: \"#2aa101\", dead: \"#c70000\", unknown: \"#ffffff\" };\r\n\r\nconst generateColorStatus = (status) => {\r\n  return colors[status.toLowerCase()];\r\n};\r\n\r\nconst size = {\r\n  w: [\"320px\", \"400px\", \"500px\", \"550px\"],\r\n  h: [\"max-content\", \"200px\"],\r\n};\r\n\r\nconst CharacterItem = ({\r\n  name,\r\n  status,\r\n  species,\r\n  gender,\r\n  location,\r\n  image,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Flex\r\n      onClick={onClick}\r\n      className=\"content-item-wrapper\"\r\n      {...size}\r\n      {...props}\r\n    >\r\n      <Image src={image} h={[\"100px\", \"160px\"]} />\r\n      <Box pl=\"10px\" textAlign=\"left\">\r\n        <Text fontSize=\"20px\" color=\"white\">\r\n          {name}\r\n        </Text>\r\n        <Flex alignItems=\"center\" fontSize=\"8px\">\r\n          <FontAwesomeIcon\r\n            icon={faCircle}\r\n            color={generateColorStatus(status)}\r\n          />\r\n          <Text ml=\"5px\" color=\"white\">{`${toUpperCaseFirst(\r\n            status\r\n          )} - ${species}`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" mt=\"5px\">\r\n          <Text messageId=\"character.gender\" />\r\n          <Text color=\"white\" ml=\"5px\">\r\n            {toUpperCaseFirst(gender)}\r\n          </Text>\r\n        </Flex>\r\n        <Text messageId=\"character.lastKnowLocation\" mt=\"5px\" />\r\n        <Text color=\"white\">{toUpperCaseFirst(location)}</Text>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default CharacterItem;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Image,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n} from \"@chakra-ui/react\";\r\nimport { ApiContext } from \"../../../contex/api\";\r\nimport Spinner from \"../../Spinner\";\r\nimport Button from \"../../shared/Button\";\r\nimport Text from \"../../shared/Text\";\r\nimport { queryEpisodes } from \"../../../constants/queryStringsForApi\";\r\nimport { toUpperCaseFirst } from \"../../../helpers/toUpperCaseFirst\";\r\nimport ErrorBoundary from \"../../ErrorBounadry\";\r\nimport useCurrentBreakpoint from \"../../../helpers/useCurrentBreakpoint\";\r\n\r\nconst FlexTextItem = ({ content, messageId, isTablet }) => {\r\n  return (\r\n    <Box display={isTablet ? \"flex\" : \"block\"}>\r\n      <Text\r\n        messageId={`character.${messageId}`}\r\n        fontSize=\"18px\"\r\n        minW={isTablet ? \"200px\" : \"content-width\"}\r\n      />\r\n      <Text color=\"white\" fontSize=\"18px\">\r\n        {toUpperCaseFirst(content)}\r\n      </Text>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst ModalCharacterInfo = ({ onClose, isOpen, characterId }) => {\r\n  const { isTablet } = useCurrentBreakpoint();\r\n  const { getCharacterById, getEpisodeById } = useContext(ApiContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [characterInfo, setCharacterInfo] = useState({});\r\n  const [firstCharacterEpisode, setFirstCharacterEpisode] = useState({});\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const { name, status, species, type, gender, origin, location, image } =\r\n    characterInfo;\r\n\r\n  const content = [\r\n    { content: status, messageId: \"status\", key: 0 },\r\n    { content: species, messageId: \"species\", key: 1 },\r\n    { content: type, messageId: \"type\", key: 2 },\r\n    { content: gender, messageId: \"gender\", key: 3 },\r\n    { content: origin?.name, messageId: \"originLocation\", key: 4 },\r\n    { content: location?.name, messageId: \"lastKnowLocation\", key: 5 },\r\n    { content: firstCharacterEpisode?.name, messageId: \"firstSeenIn\", key: 6 },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (!characterId) return;\r\n    (async () => {\r\n      if (isError) {\r\n        setIsError(false);\r\n      }\r\n      setIsLoading(true);\r\n      try {\r\n        const characterInfo = await getCharacterById(characterId);\r\n        const firstCharactersEpisodeId = characterInfo.episode[0].replace(\r\n          queryEpisodes,\r\n          \"\"\r\n        );\r\n        const firstCharacterEpisode = await getEpisodeById(\r\n          firstCharactersEpisodeId\r\n        );\r\n        setFirstCharacterEpisode(firstCharacterEpisode);\r\n        setCharacterInfo(characterInfo);\r\n        setIsLoading(false);\r\n      } catch {\r\n        setIsError(true);\r\n        setIsLoading(false);\r\n      }\r\n    })();\r\n  }, [characterId]);\r\n\r\n  return (\r\n    <Modal\r\n      size={\"2xl\"}\r\n      onClose={onClose}\r\n      isOpen={isOpen}\r\n      isCentered={true}\r\n      scrollBehavior={\"outside\"}\r\n      position=\"fixed\"\r\n    >\r\n      <ModalOverlay />\r\n      <ModalContent backgroundColor=\"black\">\r\n        {isLoading ? (\r\n          <Spinner />\r\n        ) : isError ? (\r\n          <ErrorBoundary />\r\n        ) : (\r\n          <>\r\n            <ModalHeader>\r\n              <Text fontSize=\"30px\" color=\"white\">\r\n                {name}\r\n              </Text>\r\n            </ModalHeader>\r\n            <ModalBody>\r\n              <Box display={isTablet ? \"flex\" : \"block\"}>\r\n                <Image src={image} h=\"200px\" />\r\n                <Box ml={isTablet ? \"20px\" : \"0px\"}>\r\n                  {content.map(\r\n                    ({ content, messageId, key }) =>\r\n                      content && (\r\n                        <FlexTextItem\r\n                          isTablet={isTablet}\r\n                          content={content}\r\n                          messageId={messageId}\r\n                          key={key}\r\n                        />\r\n                      )\r\n                  )}\r\n                </Box>\r\n              </Box>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button onClick={onClose} messageId=\"button.close\" />\r\n            </ModalFooter>\r\n          </>\r\n        )}\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalCharacterInfo;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Box, Grid, GridItem, Input, Select, Flex } from \"@chakra-ui/react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { ApiContext } from \"../../../contex/api\";\r\nimport { personSearchingParams } from \"../../../constants/searchingParams\";\r\nimport CharacterItem from \"./CharacterItem\";\r\nimport Button from \"../../shared/Button\";\r\nimport Spinner from \"../../Spinner\";\r\nimport ModalCharacterInfo from \"./ModalCharacterInfo\";\r\nimport Drawer from \"../../shared/Drawer\";\r\nimport Text from \"../../shared/Text\";\r\nimport ErrorBoundary from \"../../ErrorBounadry\";\r\n\r\nconst initialParamsForSearching = {\r\n  name: \"\",\r\n  status: \"All\",\r\n  species: \"All\",\r\n  type: \"All\",\r\n  gender: \"All\",\r\n};\r\n\r\nconst countOfFirstPage = 1;\r\n\r\nfunction CharactersPage({ isOpen, onOpen, onClose }) {\r\n  const intl = useIntl();\r\n  const { getCharacterByParams } = useContext(ApiContext);\r\n  const [paramsForSearching, setParamsForSearching] = useState(\r\n    initialParamsForSearching\r\n  );\r\n  const [characters, setCharacters] = useState([]);\r\n  const [currentCharacterId, setCurrentCharacterId] = useState();\r\n  const [modalVisibility, toggleModalVisibility] = useState(false);\r\n  const [isNextPageExist, setIsNextPageExist] = useState(true);\r\n  const [isFirstLoading, setIsFirstLoading] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [page, setPage] = useState(countOfFirstPage);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const updateParamsForSearching = (params, type) => {\r\n    setParamsForSearching({ ...paramsForSearching, [type]: params });\r\n  };\r\n\r\n  const onUpdateListCharacter = async () => {\r\n    if (isError) {\r\n      setIsError(false);\r\n    }\r\n    setIsLoading(true);\r\n    setPage(countOfFirstPage);\r\n    try {\r\n      const data = await getCharacterByParams(paramsForSearching, page);\r\n      setIsNextPageExist(!!data.info.next);\r\n      setCharacters(data.results);\r\n      setIsLoading(false);\r\n    } catch {\r\n      setIsError(true);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!characters.length) {\r\n        setIsFirstLoading(true);\r\n      }\r\n      if (isError) {\r\n        setIsError(false);\r\n      }\r\n      setIsLoading(true);\r\n      try {\r\n        const data = await getCharacterByParams(paramsForSearching, page);\r\n        setIsNextPageExist(!!data.info.next);\r\n        setCharacters([...characters, ...data.results]);\r\n        setIsLoading(false);\r\n      } catch {\r\n        setIsError(true);\r\n        setIsLoading(false);\r\n      }\r\n      if (characters.length) {\r\n        return;\r\n      }\r\n      setIsFirstLoading(false);\r\n    })();\r\n  }, [page]);\r\n\r\n  if (isError) {\r\n    return <ErrorBoundary />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        onOpen={onOpen}\r\n        onClose={onClose}\r\n        onUpdateListData={onUpdateListCharacter}\r\n      >\r\n        <Input\r\n          value={paramsForSearching.name}\r\n          onChange={(e) => updateParamsForSearching(e.target.value, \"name\")}\r\n          focusBorderColor=\"rgb(0, 217, 255)\"\r\n          variant=\"flushed\"\r\n          placeholder={intl.formatMessage({ id: \"placeholder.search\" })}\r\n        />\r\n\r\n        {personSearchingParams.map(({ type, content, key }) => (\r\n          <Flex\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            mt=\"20px\"\r\n            key={key}\r\n          >\r\n            <Text messageId={`character.${type}`} />\r\n            <Select\r\n              value={paramsForSearching[type]}\r\n              onChange={(e) => updateParamsForSearching(e.target.value, type)}\r\n              maxW=\"200px\"\r\n              size=\"xs\"\r\n              focusBorderColor=\"rgb(0, 217, 255)\"\r\n              borderRadius=\"12px\"\r\n            >\r\n              {content.map(({ option, id }) => (\r\n                <option\r\n                  key={id}\r\n                  style={{\r\n                    backgroundColor: \"black\",\r\n                  }}\r\n                >\r\n                  {option}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n          </Flex>\r\n        ))}\r\n      </Drawer>\r\n      <Box p=\"20px\">\r\n        {isFirstLoading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <>\r\n            <Grid\r\n              templateColumns={[\r\n                \"repeat(1, 2fr)\",\r\n                \"repeat(1, 2fr)\",\r\n                \"repeat(1, 2fr)\",\r\n                \"repeat(2, 2fr)\",\r\n              ]}\r\n              gap={3}\r\n            >\r\n              {!!characters.length &&\r\n                characters.map(\r\n                  ({ id, name, status, species, gender, location, image }) => (\r\n                    <GridItem key={id} display=\"flex\" justifyContent=\"center\">\r\n                      <CharacterItem\r\n                        onClick={() => {\r\n                          toggleModalVisibility(true);\r\n                          setCurrentCharacterId(id);\r\n                        }}\r\n                        name={name}\r\n                        status={status}\r\n                        species={species}\r\n                        gender={gender}\r\n                        location={location.name}\r\n                        image={image}\r\n                      />\r\n                    </GridItem>\r\n                  )\r\n                )}\r\n            </Grid>\r\n            {isNextPageExist && (\r\n              <Box mt=\"20px\" display=\"flex\" justifyContent=\"center\">\r\n                <Button\r\n                  size=\"md\"\r\n                  isLoading={isLoading}\r\n                  onClick={() => setPage(page + 1)}\r\n                  messageId=\"button.more\"\r\n                />\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n      <ModalCharacterInfo\r\n        characterId={currentCharacterId}\r\n        onClose={() => toggleModalVisibility(false)}\r\n        isOpen={modalVisibility}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CharactersPage;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Image,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  Grid,\r\n  GridItem,\r\n} from \"@chakra-ui/react\";\r\nimport { ApiContext } from \"../../../contex/api\";\r\nimport Spinner from \"../../Spinner\";\r\nimport Button from \"../../shared/Button\";\r\nimport Text from \"../../shared/Text\";\r\nimport { queryCharacters } from \"../../../constants/queryStringsForApi\";\r\nimport { toUpperCaseFirst } from \"../../../helpers/toUpperCaseFirst\";\r\nimport ErrorBoundary from \"../../ErrorBounadry\";\r\n\r\nconst FlexTextItem = ({ content, messageId }) => {\r\n  return (\r\n    <Flex>\r\n      <Text messageId={`episode.${messageId}`} fontSize=\"18px\" minW=\"200px\" />\r\n      <Text color=\"white\" fontSize=\"18px\">\r\n        {toUpperCaseFirst(content)}\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst ModalEpisodeInfo = ({ onClose, isOpen, episodeId }) => {\r\n  const { getCharacterById, getEpisodeById } = useContext(ApiContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [episodeInfo, setEpisodeInfo] = useState({});\r\n  const [episodeCharacters, setEpisodeCharacters] = useState([]);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const { name, air_date: date, episode } = episodeInfo;\r\n\r\n  const content = [\r\n    { content: date, messageId: \"date\", key: 0 },\r\n    { content: episode, messageId: \"episode\", key: 1 },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (!episodeId) return;\r\n    (async () => {\r\n      if (isError) {\r\n        setIsError(false);\r\n      }\r\n      setIsLoading(true);\r\n      try {\r\n        const episodeInfo = await getEpisodeById(episodeId);\r\n        const episodeCharactersId = episodeInfo.characters.map((item) =>\r\n          item.replace(queryCharacters, \"\")\r\n        );\r\n        const episodeCharacters = await getCharacterById(episodeCharactersId);\r\n        setEpisodeCharacters(episodeCharacters);\r\n        setEpisodeInfo(episodeInfo);\r\n        setIsLoading(false);\r\n      } catch {\r\n        setIsError(true);\r\n        setIsLoading(false);\r\n      }\r\n    })();\r\n  }, [episodeId]);\r\n\r\n  return (\r\n    <Modal\r\n      size={\"xl\"}\r\n      onClose={onClose}\r\n      isOpen={isOpen}\r\n      scrollBehavior={\"outside\"}\r\n      position=\"fixed\"\r\n    >\r\n      <ModalOverlay />\r\n      <ModalContent backgroundColor=\"black\">\r\n        {isLoading ? (\r\n          <Spinner />\r\n        ) : isError ? (\r\n          <ErrorBoundary />\r\n        ) : (\r\n          <>\r\n            <ModalHeader>\r\n              <Text fontSize=\"30px\" color=\"white\">\r\n                {name}\r\n              </Text>\r\n            </ModalHeader>\r\n            <ModalBody>\r\n              <Box>\r\n                {content.map(\r\n                  ({ content, messageId, key }) =>\r\n                    content && (\r\n                      <FlexTextItem\r\n                        content={content}\r\n                        messageId={messageId}\r\n                        key={key}\r\n                      />\r\n                    )\r\n                )}\r\n              </Box>\r\n              <Text messageId=\"episode.characters\" mt=\"5px\" fontSize=\"24px\" />\r\n              <Grid\r\n                templateColumns={[\"repeat(3, 2fr)\", \"repeat(4, 2fr)\"]}\r\n                gap={5}\r\n                mt=\"5px\"\r\n              >\r\n                {episodeCharacters.map(({ name, image, id }) => (\r\n                  <GridItem key={id}>\r\n                    <Box>\r\n                      <Image src={image} maxW=\"70px\" />\r\n                      <Text color=\"white\" mt=\"5px\">\r\n                        {name}\r\n                      </Text>\r\n                    </Box>\r\n                  </GridItem>\r\n                ))}\r\n              </Grid>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button onClick={onClose} messageId=\"button.close\" />\r\n            </ModalFooter>\r\n          </>\r\n        )}\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalEpisodeInfo;\r\n","import React from \"react\";\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\nimport Text from \"../../shared/Text\";\r\n\r\nconst EpisodesItem = ({ name, episode, date, onClick }) => {\r\n  return (\r\n    <Box\r\n      onClick={onClick}\r\n      w={[\"300px\", \"300px\", \"300px\", \"500px\"]}\r\n      className=\"content-item-wrapper\"\r\n      textAlign=\"left\"\r\n    >\r\n      <Flex>\r\n        <Text messageId=\"episode.name\" />\r\n        <Text ml=\"5px\" wordwrap=\"break-word\" color=\"white\">\r\n          {name}\r\n        </Text>\r\n      </Flex>\r\n      <Flex>\r\n        <Text messageId=\"episode.episode\" />\r\n        <Text ml=\"5px\" wordwrap=\"break-word\" color=\"white\">\r\n          {episode}\r\n        </Text>\r\n      </Flex>\r\n      <Flex>\r\n        <Text messageId=\"episode.date\" />\r\n        <Text ml=\"5px\" wordwrap=\"break-word\" color=\"white\">\r\n          {date}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default EpisodesItem;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  GridItem,\r\n  Input,\r\n  Flex,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n} from \"@chakra-ui/react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { ApiContext } from \"../../../contex/api\";\r\nimport { episodeSearchingParams } from \"../../../constants/searchingParams\";\r\nimport ModalEpisodeInfo from \"./ModalEpisodeInfo\";\r\nimport EpisodesItem from \"./EpisodesItem\";\r\nimport Button from \"../../shared/Button\";\r\nimport Spinner from \"../../Spinner\";\r\nimport Drawer from \"../../shared/Drawer\";\r\nimport Text from \"../../shared/Text\";\r\nimport ErrorBoundary from \"../../ErrorBounadry\";\r\n\r\nconst countOfFirstPage = 1;\r\n\r\nconst initialParamsForSearching = {\r\n  name: \"\",\r\n  season: \"\",\r\n  episode: \"\",\r\n};\r\n\r\nfunction EpisodesPage({ isOpen, onOpen, onClose }) {\r\n  const intl = useIntl();\r\n  const { getAllEpisodes, getEpisodeByParams } = useContext(ApiContext);\r\n  const [paramsForSearching, setParamsForSearching] = useState(\r\n    initialParamsForSearching\r\n  );\r\n\r\n  const [modalVisibility, toggleModalVisibility] = useState(false);\r\n  const [currentEpisodeId, setCurrentEpisodeId] = useState();\r\n  const [isNextPageExist, setIsNextPageExist] = useState(true);\r\n  const [isFirstLoading, setIsFirstLoading] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [episodes, setEpisodes] = useState([]);\r\n  const [page, setPage] = useState(countOfFirstPage);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const updateParamsForSearching = (params, type) => {\r\n    setParamsForSearching({ ...paramsForSearching, [type]: params });\r\n  };\r\n\r\n  const onUpdateListEpisode = async () => {\r\n    if (isError) {\r\n      setIsError(false);\r\n    }\r\n    setIsLoading(true);\r\n    setPage(countOfFirstPage);\r\n    try {\r\n      const data = await getEpisodeByParams(paramsForSearching, page);\r\n      setIsNextPageExist(!!data.info.next);\r\n      setEpisodes(data.results);\r\n      setIsLoading(false);\r\n    } catch {\r\n      setIsError(true);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!episodes.length) {\r\n        setIsFirstLoading(true);\r\n      }\r\n      if (isError) {\r\n        setIsError(false);\r\n      }\r\n      setIsLoading(true);\r\n      try {\r\n        const data = await getAllEpisodes(page);\r\n        setIsNextPageExist(!!data.info.next);\r\n        setEpisodes([...episodes, ...data.results]);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setIsError(true);\r\n        setIsLoading(false);\r\n      }\r\n      if (episodes.length) {\r\n        return;\r\n      }\r\n      setIsFirstLoading(false);\r\n    })();\r\n  }, [page]);\r\n\r\n  if (isError) {\r\n    return <ErrorBoundary />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        onOpen={onOpen}\r\n        onClose={onClose}\r\n        onUpdateListData={onUpdateListEpisode}\r\n      >\r\n        <Input\r\n          value={paramsForSearching.name}\r\n          onChange={(e) => updateParamsForSearching(e.target.value, \"name\")}\r\n          focusBorderColor=\"rgb(0, 217, 255)\"\r\n          variant=\"flushed\"\r\n          placeholder={intl.formatMessage({ id: \"placeholder.search\" })}\r\n        />\r\n        {episodeSearchingParams.map(({ type, id, max }) => (\r\n          <Flex\r\n            mt=\"20px\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            key={id}\r\n          >\r\n            <Text messageId={`episode.${type}`} />\r\n            <NumberInput\r\n              onChange={(count) => updateParamsForSearching(count, type)}\r\n              value={paramsForSearching[type]}\r\n              size=\"xs\"\r\n              maxW=\"100px\"\r\n              min={1}\r\n              max={max}\r\n              focusBorderColor=\"rgb(0, 217, 255)\"\r\n            >\r\n              <NumberInputField />\r\n              <NumberInputStepper>\r\n                <NumberIncrementStepper />\r\n                <NumberDecrementStepper />\r\n              </NumberInputStepper>\r\n            </NumberInput>\r\n          </Flex>\r\n        ))}\r\n      </Drawer>\r\n      <Box p=\"20px\">\r\n        {isFirstLoading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <>\r\n            <Grid\r\n              templateColumns={[\"repeat(1, 2fr)\", \"repeat(2, 2fr)\"]}\r\n              gap={3}\r\n            >\r\n              {!!episodes.length &&\r\n                episodes.map(({ id, name, episode, air_date }) => (\r\n                  <GridItem key={id} display=\"flex\" justifyContent=\"center\">\r\n                    <EpisodesItem\r\n                      onClick={() => {\r\n                        toggleModalVisibility(true);\r\n                        setCurrentEpisodeId(id);\r\n                      }}\r\n                      name={name}\r\n                      episode={episode}\r\n                      date={air_date}\r\n                    />\r\n                  </GridItem>\r\n                ))}\r\n            </Grid>\r\n            {isNextPageExist && (\r\n              <Box mt=\"20px\" display=\"flex\" justifyContent=\"center\">\r\n                <Button\r\n                  size=\"md\"\r\n                  isLoading={isLoading}\r\n                  onClick={() => setPage(page + 1)}\r\n                  messageId=\"button.more\"\r\n                />\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n      <ModalEpisodeInfo\r\n        episodeId={currentEpisodeId}\r\n        onClose={() => toggleModalVisibility(false)}\r\n        isOpen={modalVisibility}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EpisodesPage;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Box, Flex, Image } from \"@chakra-ui/react\";\r\nimport { ApiContext } from \"../../../contex/api\";\r\nimport CharacterItem from \"../Characters/CharacterItem\";\r\nimport ModalCharacterInfo from \"../Characters/ModalCharacterInfo\";\r\nimport Text from \"../../shared/Text\";\r\nimport ErrorBoundary from \"../../ErrorBounadry\";\r\nimport Spinner from \"../../Spinner\";\r\nimport useCurrentBreakpoint from \"../../../helpers/useCurrentBreakpoint\";\r\n\r\nconst HomePage = () => {\r\n  const { isTablet } = useCurrentBreakpoint();\r\n  const { getCharacterById, getAllCharacter } = useContext(ApiContext);\r\n  const [countOfAllCharacters, setCountOfAllCharacters] = useState(null);\r\n  const [character, setCharacter] = useState({});\r\n  const [isError, setIsError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [currentCharacterId, setCurrentCharacterId] = useState();\r\n  const [modalVisibility, toggleModalVisibility] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const { info, results } = await getAllCharacter();\r\n        const randomCharactersIndex = Math.floor(\r\n          Math.random() * results.length\r\n        );\r\n        setCountOfAllCharacters(info?.count);\r\n        setCharacter(results[randomCharactersIndex]);\r\n      } catch {\r\n        setIsError(true);\r\n        setIsLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(async () => {\r\n      try {\r\n        const randomCharacterId = Math.floor(\r\n          Math.random() * (countOfAllCharacters + 1)\r\n        );\r\n        const data = await getCharacterById(randomCharacterId);\r\n        setCharacter(data);\r\n      } catch {\r\n        setIsError(true);\r\n        setIsLoading(false);\r\n      }\r\n    }, 5000);\r\n    return () => clearInterval(timer);\r\n  });\r\n\r\n  return (\r\n    <Box position=\"relative\" w=\"90%\" m=\"0 auto\">\r\n      <Box\r\n        d={isTablet ? \"flex\" : \"block\"}\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        alignContent=\"center\"\r\n      >\r\n        <Image\r\n          m=\"0 auto\"\r\n          pb=\"10px\"\r\n          src=\"https://i1.wp.com/placebo.lu/wp-content/uploads/2020/03/rick-and-morty-portal-headshop.png?fit=500%2C500&ssl=1\"\r\n          height={[\"250px\", \"350px\", \"350px\", \"350px\"]}\r\n        />\r\n        {isLoading ? (\r\n          <Spinner />\r\n        ) : isError ? (\r\n          <ErrorBoundary />\r\n        ) : (\r\n          character?.name && (\r\n            <CharacterItem\r\n              m={\"0 auto\"}\r\n              name={character.name}\r\n              status={character.status}\r\n              species={character.species}\r\n              gender={character.gender}\r\n              location={character.location.name}\r\n              image={character.image}\r\n              onClick={() => {\r\n                toggleModalVisibility(true);\r\n                setCurrentCharacterId(character.id);\r\n              }}\r\n            />\r\n          )\r\n        )}\r\n      </Box>\r\n      <Box\r\n        backgroundColor=\"rgba(0, 0, 0, 0.9)\"\r\n        borderRadius=\"12px\"\r\n        p=\"20px\"\r\n        minW=\"320px\"\r\n        mt=\"5px\"\r\n      >\r\n        <Text\r\n          messageId=\"rickAndMorty.main\"\r\n          color=\"white\"\r\n          fontSize={[\"16px\", \"22px\", \"22px\", \"22px\"]}\r\n        />\r\n      </Box>\r\n      <ModalCharacterInfo\r\n        characterId={currentCharacterId}\r\n        onClose={() => toggleModalVisibility(false)}\r\n        isOpen={modalVisibility}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\nimport Header from \"./components/Header\";\r\nimport LocationsPage from \"./components/Pages/Locations\";\r\nimport CharactersPage from \"./components/Pages/Characters\";\r\nimport EpisodesPage from \"./components/Pages/Episodes\";\r\nimport HomePage from \"./components/Pages/Home\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header onOpen={onOpen} />\r\n      <div className=\"container\">\r\n        <Switch>\r\n          <Route exact path=\"/\" render={() => <HomePage />} />\r\n          <Route\r\n            exact\r\n            path=\"/episodes\"\r\n            render={() => <EpisodesPage isOpen={isOpen} onClose={onClose} />}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/characters\"\r\n            render={() => <CharactersPage isOpen={isOpen} onClose={onClose} />}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/locations\"\r\n            render={() => <LocationsPage isOpen={isOpen} onClose={onClose} />}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { ApiProvider } from \"./contex/api\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport { LngProvider } from \"./contex/locale\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport theme from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider theme={theme}>\r\n      <Router>\r\n        <ApiProvider>\r\n          <LngProvider>\r\n            <App />\r\n          </LngProvider>\r\n        </ApiProvider>\r\n      </Router>\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}